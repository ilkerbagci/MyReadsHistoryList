{"ast":null,"code":"import _toConsumableArray from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/src/SearchPage.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport Shelf from './Shelf';\nimport Book from './Book';\nvar currentlyReadingBooks = [];\nvar wantToReadBooks = [];\nvar readBooks = [];\nvar noneBooks = [];\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchPage, _Component);\n\n  function SearchPage(props) {\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchPage).call(this, props));\n\n    _this.updateQuery = function (query) {\n      BooksAPI.search(query).then(function (result) {\n        if (typeof result === 'undefined') {\n          _this.setState({\n            searchedBooks: _this.props.shelfBooks\n          });\n        } else {\n          _this.setState({\n            searchedBooks: result\n          });\n        }\n      });\n    };\n\n    _this.getBooksWithShelves = function () {\n      var shelfBooks = _this.props.shelfBooks;\n      var searchedBooks = _this.state.searchedBooks;\n      var books = [];\n      var isInShelf = false;\n\n      if (searchedBooks.length > 0) {\n        var newSearchedBooks = _toConsumableArray(searchedBooks);\n\n        newSearchedBooks.forEach(function (searchedBook, index) {\n          isInShelf = false;\n          shelfBooks.forEach(function (shelfBook) {\n            if (shelfBook.id === searchedBook.id) {\n              isInShelf = true;\n              books.push(shelfBook);\n              return;\n            }\n          });\n\n          if (!isInShelf) {\n            searchedBook.shelf = 'none';\n            books.push(searchedBook);\n          }\n        });\n      }\n\n      return books;\n    };\n\n    _this.state = {\n      searchedBooks: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      currentlyReadingBooks = [];\n      wantToReadBooks = [];\n      readBooks = [];\n      noneBooks = [];\n      var mBooks = this.getBooksWithShelves();\n      mBooks.forEach(function (book) {\n        if (book.shelf === 'currentlyReading') {\n          currentlyReadingBooks.push(book);\n        } else if (book.shelf === 'wantToRead') {\n          wantToReadBooks.push(book);\n        } else if (book.shelf === 'read') {\n          readBooks.push(book);\n        } else if (book.shelf === 'none') {\n          noneBooks.push(book);\n        }\n      });\n      var noneBookItems = noneBooks.map(function (noneBook) {\n        return React.createElement(Book, {\n          key: noneBook.id,\n          book: noneBook,\n          onShelfSelectionChanged: _this2.props.onShelfSelectionChanged,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"close-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Close\"), \" \"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, noneBookItems)), currentlyReadingBooks.length > 0 && React.createElement(Shelf, {\n        books: currentlyReadingBooks,\n        shelfName: \"Currently Reading\",\n        onShelfSelectionChanged: this.props.onShelfSelectionChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), wantToReadBooks.length > 0 && React.createElement(Shelf, {\n        books: wantToReadBooks,\n        shelfName: \"Want To Read\",\n        onShelfSelectionChanged: this.props.onShelfSelectionChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), readBooks.length > 0 && React.createElement(Shelf, {\n        books: readBooks,\n        shelfName: \"Read\",\n        onShelfSelectionChanged: this.props.onSelectChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SearchPage;\n}(Component);\n\nexport default SearchPage;","map":{"version":3,"sources":["/Users/ibagci/Documents/React/Projects/ReactND-MyReads/src/SearchPage.js"],"names":["React","Component","Link","BooksAPI","Shelf","Book","currentlyReadingBooks","wantToReadBooks","readBooks","noneBooks","SearchPage","props","updateQuery","query","search","then","result","setState","searchedBooks","shelfBooks","getBooksWithShelves","state","books","isInShelf","length","newSearchedBooks","forEach","searchedBook","index","shelfBook","id","push","shelf","mBooks","book","noneBookItems","map","noneBook","onShelfSelectionChanged","event","target","value","onSelectChange"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport Shelf from './Shelf'\nimport Book from './Book'\n\nlet currentlyReadingBooks= [];\nlet wantToReadBooks = [];\nlet readBooks = [];\nlet noneBooks = [];\n\nclass SearchPage extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n       searchedBooks: []\n    };\n  }\n\n  updateQuery = (query) => {\n\n      BooksAPI.search(query).then((result) => {\n        if(typeof result === 'undefined' ) {\n          this.setState({\n            searchedBooks: this.props.shelfBooks,\n          })\n        } else {\n          this.setState({\n            searchedBooks: result,\n          })   \n        }\n      })\n  }\n\n  getBooksWithShelves = () => {\n    const { shelfBooks } = this.props\n    const { searchedBooks } = this.state\n\n    let books = [];\n    let isInShelf = false;\n\n    if(searchedBooks.length > 0) {\n      const newSearchedBooks = [...searchedBooks];\n\n      newSearchedBooks.forEach((searchedBook, index) => {\n        isInShelf = false;\n        shelfBooks.forEach(shelfBook => {\n          if(shelfBook.id === searchedBook.id) {\n            isInShelf = true;\n            books.push(shelfBook)\n            return;\n          }\n        });\n        if(!isInShelf) {\n          searchedBook.shelf = 'none'\n          books.push(searchedBook)\n        }\n      });\n\n    }\n    return books;\n  }\n\n  render() {\n    currentlyReadingBooks= [];\n    wantToReadBooks = [];\n    readBooks = [];\n    noneBooks = [];\n\n    let mBooks = this.getBooksWithShelves();\n\n    mBooks.forEach(book => {\n      if (book.shelf === 'currentlyReading') {\n        currentlyReadingBooks.push(book)\n      }else if (book.shelf === 'wantToRead') {\n        wantToReadBooks.push(book)\n      }else if (book.shelf === 'read') {\n        readBooks.push(book)\n      }else if (book.shelf === 'none') {\n        noneBooks.push(book)\n    }\n    });\n\n    let noneBookItems = noneBooks.map((noneBook) => {\n      return (\n        <Book\n            key = {noneBook.id}\n            book = {noneBook}\n            onShelfSelectionChanged = {this.props.onShelfSelectionChanged}\n        />\n      )\n    })\n\n    return (\n        <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n        <Link\n        to='/'><button className=\"close-search\">Close</button> </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input type=\"text\" placeholder=\"Search by title or author\" \n                onChange={(event) => this.updateQuery(event.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {noneBookItems}\n          </ol>\n        </div>\n        {currentlyReadingBooks.length > 0 && <Shelf\n            books = {currentlyReadingBooks}\n            shelfName='Currently Reading'\n            onShelfSelectionChanged={this.props.onShelfSelectionChanged}\n            />  }\n                      \n        {wantToReadBooks.length > 0 && <Shelf\n            books = {wantToReadBooks}\n            shelfName='Want To Read'\n            onShelfSelectionChanged={this.props.onShelfSelectionChanged}\n            />  }\n                        \n        {readBooks.length > 0 && <Shelf\n            books = {readBooks}\n            shelfName='Read'\n            onShelfSelectionChanged={this.props.onSelectChange}\n          /> } \n      </div>\n    )\n  }\n}\n\nexport default SearchPage;"]},"metadata":{},"sourceType":"module"}