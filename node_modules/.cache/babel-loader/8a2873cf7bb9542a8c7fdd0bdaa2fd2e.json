{"ast":null,"code":"import _toConsumableArray from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ibagci/Documents/React/Projects/ReactND-MyReads/src/SearchPage.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport Shelf from './Shelf';\nimport Book from './Book';\nvar currentlyReadingBooks = [];\nvar wantToReadBooks = [];\nvar readBooks = [];\nvar noneBooks = [];\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchPage, _Component);\n\n  function SearchPage(props) {\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchPage).call(this, props));\n\n    _this.updateQuery = function (query) {\n      BooksAPI.search(query).then(function (result) {\n        if (typeof result === 'undefined') {\n          _this.setState({\n            searchedBooks: _this.props.shelfBooks\n          });\n        } else {\n          _this.setState({\n            searchedBooks: result\n          });\n        }\n      });\n    };\n\n    _this.getBooksWithShelves = function () {\n      var shelfBooks = _this.props.shelfBooks;\n      var searchedBooks = _this.state.searchedBooks;\n      var books = [];\n      var isInShelf = false;\n\n      if (searchedBooks.length > 0) {\n        var newSearchedBooks = _toConsumableArray(searchedBooks);\n\n        newSearchedBooks.forEach(function (searchedBook) {\n          isInShelf = false;\n          shelfBooks.forEach(function (shelfBook) {\n            if (shelfBook.id === searchedBook.id) {\n              isInShelf = true;\n              books.push(shelfBook);\n              return;\n            }\n          });\n\n          if (!isInShelf) {\n            searchedBook.shelf = 'none';\n            books.push(searchedBook);\n          }\n        });\n      }\n\n      return books;\n    };\n\n    _this.state = {\n      searchedBooks: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      currentlyReadingBooks = [];\n      wantToReadBooks = [];\n      readBooks = [];\n      noneBooks = [];\n      var mBooks = this.getBooksWithShelves();\n      mBooks.forEach(function (book) {\n        if (book.shelf === 'currentlyReading') {\n          currentlyReadingBooks.push(book);\n        } else if (book.shelf === 'wantToRead') {\n          wantToReadBooks.push(book);\n        } else if (book.shelf === 'read') {\n          readBooks.push(book);\n        } else if (book.shelf === 'none') {\n          noneBooks.push(book);\n        }\n      });\n      var noneBookItems = noneBooks.map(function (book) {\n        return React.createElement(Book, {\n          key: book.id,\n          book: book,\n          onShelfSelectionChanged: _this2.props.onShelfSelectionChanged,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"close-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Close\"), \" \"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, noneBookItems)));\n    }\n  }]);\n\n  return SearchPage;\n}(Component);\n\nexport default SearchPage;","map":{"version":3,"sources":["/Users/ibagci/Documents/React/Projects/ReactND-MyReads/src/SearchPage.js"],"names":["React","Component","Link","BooksAPI","Shelf","Book","currentlyReadingBooks","wantToReadBooks","readBooks","noneBooks","SearchPage","props","updateQuery","query","search","then","result","setState","searchedBooks","shelfBooks","getBooksWithShelves","state","books","isInShelf","length","newSearchedBooks","forEach","searchedBook","shelfBook","id","push","shelf","mBooks","book","noneBookItems","map","onShelfSelectionChanged","event","target","value"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAIC,qBAAqB,GAAG,EAA5B;AACA,IAAIC,eAAe,GAAG,EAAtB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,SAAS,GAAG,EAAhB;;IAEMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAOnBC,WAPmB,GAOL,UAACC,KAAD,EAAW;AACrBV,MAAAA,QAAQ,CACHW,MADL,CACYD,KADZ,EAEKE,IAFL,CAEU,UAACC,MAAD,EAAY;AACd,YAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,gBAAKC,QAAL,CAAc;AACVC,YAAAA,aAAa,EAAE,MAAKP,KAAL,CAAWQ;AADhB,WAAd;AAGH,SAJD,MAIO;AACH,gBAAKF,QAAL,CAAc;AACVC,YAAAA,aAAa,EAAEF;AADL,WAAd;AAGH;AACJ,OAZL;AAaH,KArBkB;;AAAA,UAuBnBI,mBAvBmB,GAuBG,YAAM;AAAA,UAChBD,UADgB,GACD,MAAKR,KADJ,CAChBQ,UADgB;AAAA,UAEhBD,aAFgB,GAEE,MAAKG,KAFP,CAEhBH,aAFgB;AAIxB,UAAII,KAAK,GAAG,EAAZ;AACA,UAAIC,SAAS,GAAG,KAAhB;;AAEA,UAAIL,aAAa,CAACM,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,YAAMC,gBAAgB,sBAAOP,aAAP,CAAtB;;AAEAO,QAAAA,gBAAgB,CAACC,OAAjB,CAAyB,UAACC,YAAD,EAAkB;AACvCJ,UAAAA,SAAS,GAAG,KAAZ;AACAJ,UAAAA,UAAU,CAACO,OAAX,CAAmB,UAAAE,SAAS,EAAI;AAC5B,gBAAIA,SAAS,CAACC,EAAV,KAAiBF,YAAY,CAACE,EAAlC,EAAsC;AAClCN,cAAAA,SAAS,GAAG,IAAZ;AACAD,cAAAA,KAAK,CAACQ,IAAN,CAAWF,SAAX;AACA;AACH;AACJ,WAND;;AAOA,cAAI,CAACL,SAAL,EAAgB;AACZI,YAAAA,YAAY,CAACI,KAAb,GAAqB,MAArB;AACAT,YAAAA,KAAK,CAACQ,IAAN,CAAWH,YAAX;AACH;AACJ,SAbD;AAeH;;AACD,aAAOL,KAAP;AACH,KAlDkB;;AAEf,UAAKD,KAAL,GAAa;AACTH,MAAAA,aAAa,EAAE;AADN,KAAb;AAFe;AAKlB;;;;6BA+CQ;AAAA;;AACLZ,MAAAA,qBAAqB,GAAG,EAAxB;AACAC,MAAAA,eAAe,GAAG,EAAlB;AACAC,MAAAA,SAAS,GAAG,EAAZ;AACAC,MAAAA,SAAS,GAAG,EAAZ;AAEA,UAAIuB,MAAM,GAAG,KAAKZ,mBAAL,EAAb;AAEAY,MAAAA,MAAM,CAACN,OAAP,CAAe,UAAAO,IAAI,EAAI;AACnB,YAAIA,IAAI,CAACF,KAAL,KAAe,kBAAnB,EAAuC;AACnCzB,UAAAA,qBAAqB,CAACwB,IAAtB,CAA2BG,IAA3B;AACH,SAFD,MAEO,IAAIA,IAAI,CAACF,KAAL,KAAe,YAAnB,EAAiC;AACpCxB,UAAAA,eAAe,CAACuB,IAAhB,CAAqBG,IAArB;AACH,SAFM,MAEA,IAAIA,IAAI,CAACF,KAAL,KAAe,MAAnB,EAA2B;AAC9BvB,UAAAA,SAAS,CAACsB,IAAV,CAAeG,IAAf;AACH,SAFM,MAEA,IAAIA,IAAI,CAACF,KAAL,KAAe,MAAnB,EAA2B;AAC9BtB,UAAAA,SAAS,CAACqB,IAAV,CAAeG,IAAf;AACH;AACJ,OAVD;AAYA,UAAIC,aAAa,GAAGzB,SAAS,CAAC0B,GAAV,CAAc,UAACF,IAAD,EAAU;AACxC,eACI,oBAAC,IAAD;AACI,UAAA,GAAG,EAAEA,IAAI,CAACJ,EADd;AAEI,UAAA,IAAI,EAAEI,IAFV;AAGI,UAAA,uBAAuB,EAAE,MAAI,CAACtB,KAAL,CAAWyB,uBAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,OARmB,CAApB;AAUA,aACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAa;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAb,MADJ,EAEI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,2BAA/B;AAA2D,QAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,iBAAW,MAAI,CAACzB,WAAL,CAAiByB,KAAK,CAACC,MAAN,CAAaC,KAA9B,CAAX;AAAA,SAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,CADJ,EAOI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKL,aADL,CADJ,CAPJ,CADJ;AAeH;;;;EAnGoBjC,S;;AAsGzB,eAAeS,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport Shelf from './Shelf'\nimport Book from './Book'\n\nlet currentlyReadingBooks = []\nlet wantToReadBooks = []\nlet readBooks = []\nlet noneBooks = []\n\nclass SearchPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchedBooks: []\n        };\n    }\n\n    updateQuery = (query) => {\n        BooksAPI\n            .search(query)\n            .then((result) => {\n                if (typeof result === 'undefined') {\n                    this.setState({\n                        searchedBooks: this.props.shelfBooks,\n                    })\n                } else {\n                    this.setState({\n                        searchedBooks: result,\n                    })\n                }\n            })\n    }\n\n    getBooksWithShelves = () => {\n        const { shelfBooks } = this.props\n        const { searchedBooks } = this.state\n\n        let books = [];\n        let isInShelf = false;\n\n        if (searchedBooks.length > 0) {\n            const newSearchedBooks = [...searchedBooks];\n\n            newSearchedBooks.forEach((searchedBook) => {\n                isInShelf = false;\n                shelfBooks.forEach(shelfBook => {\n                    if (shelfBook.id === searchedBook.id) {\n                        isInShelf = true;\n                        books.push(shelfBook)\n                        return;\n                    }\n                });\n                if (!isInShelf) {\n                    searchedBook.shelf = 'none'\n                    books.push(searchedBook)\n                }\n            });\n\n        }\n        return books;\n    }\n\n    render() {\n        currentlyReadingBooks = [];\n        wantToReadBooks = [];\n        readBooks = [];\n        noneBooks = [];\n\n        let mBooks = this.getBooksWithShelves();\n\n        mBooks.forEach(book => {\n            if (book.shelf === 'currentlyReading') {\n                currentlyReadingBooks.push(book)\n            } else if (book.shelf === 'wantToRead') {\n                wantToReadBooks.push(book)\n            } else if (book.shelf === 'read') {\n                readBooks.push(book)\n            } else if (book.shelf === 'none') {\n                noneBooks.push(book)\n            }\n        });\n\n        let noneBookItems = noneBooks.map((book) => {\n            return (\n                <Book\n                    key={book.id}\n                    book={book}\n                    onShelfSelectionChanged={this.props.onShelfSelectionChanged}\n                />\n            )\n        })\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to='/'><button className=\"close-search\">Close</button> </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input type=\"text\" placeholder=\"Search by title or author\" onChange={(event) => this.updateQuery(event.target.value)} />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {noneBookItems}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchPage;"]},"metadata":{},"sourceType":"module"}